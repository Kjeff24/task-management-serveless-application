AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Serverless Spring Boot 2 API - org.example::spring-boot-serveless
Globals:
  Api:
    EndpointConfiguration: REGIONAL

Parameters:
  FrontendDevHost:
    Type: String
    Default: "http://localhost:4200"
    Description: The localhost of my frontend
  FrontendProdHost:
    Type: String
    Default: "http://localhost:4200"
    Description: The localhost of my frontend
  UserPoolAdminGroupName:
    Description: User pool group name for API administrators
    Type: String
    Default: ADMIN
  UserPoolTeamGroupName:
    Description: User pool group name for API normal users
    Type: String
    Default: USER
  DynamodbTasksTableName:
    Description: Dynamodb table for task
    Type: String
    Default: TasksTable
  AdminEmail:
    Description: Admin email
    Type: String
    Default: ""

Resources:
  # Lambda Function for API Gateway
  SpringBootServerlessFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SpringBootServerlessFunction
      Handler: org.example.StreamLambdaHandler::handleRequest
      Runtime: java21
      CodeUri: .
      MemorySize: 512
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt SQSTaskQueue.Arn
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
            Resource:
              - !GetAtt TasksTable.Arn
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTasksTableName}/index/*
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:AdminCreateUser
              - cognito-idp:AdminAddUserToGroup
              - cognito-idp:AdminListGroupsForUser
              - cognito-idp:ListUsers
            Resource: !GetAtt UserPool.Arn
        - Statement:
            Effect: Allow
            Action:
              - states:StartExecution
            Resource:
              - !GetAtt StepFunctionStateMachine.Arn
      Timeout: 30
      Environment:
        Variables:
          TASKS_TABLE_NAME: !Ref DynamodbTasksTableName
          FRONTEND_DEV_URL: !Ref FrontendDevHost
          FRONTEND_PROD_URL: !Ref FrontendProdHost
          TASKS_ASSIGNMENT_TOPIC_ARN: !Ref TasksAssignmentNotificationTopic
          TASKS_COMPLETE_TOPIC_ARN: !Ref TaskCompleteNotificationTopic
          REOPENED_TASKS_TOPIC_ARN: !Ref ReopenedTasksNotificationTopic
          COGNITO_ADMIN_GROUP: !Ref UserPoolAdminGroupName
          COGNITO_TEAM_MEMBERS_GROUP: !Ref UserPoolTeamGroupName
          COGNITO_USER_POOL_ID: !Ref UserPool
          TASKS_QUEUE_URL: !Ref SQSTaskQueue
          STATE_MACHINE_ARN: !Ref StepFunctionStateMachine
      Events:
        ProxyResource:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: any

  # Lambda Function for SQS Notification Processing and state machine execution
  SQSEventLambda :
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SQSEventLambda
      Handler: org.example.SQSEventLambda::handleRequest
      Runtime: java21
      CodeUri: .
      MemorySize: 512
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource: !GetAtt SQSTaskQueue.Arn
        - Statement:
            Effect: Allow
            Action:
              - sns:Publish
              - sns:ListSubscriptionsByTopic
              - sns:GetSubscriptionAttributes
              - sns:SetSubscriptionAttributes
            Resource:
              - !Ref TasksAssignmentNotificationTopic
              - !Ref ReopenedTasksNotificationTopic
              - !Ref TaskCompleteNotificationTopic
        - Statement:
            Effect: Allow
            Action:
              - states:StartExecution
            Resource:
              - !GetAtt StepFunctionStateMachine.Arn
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref StepFunctionStateMachine
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSTaskQueue.Arn
            BatchSize: 5

  # Lambda Function for SQS Notification Processing
  SubscribeToSnsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SubscribeToSNSLambda
      Handler: org.example.SubscribeToSNSLambda::handleRequest
      Runtime: java21
      CodeUri: .
      MemorySize: 512
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - sns:Subscribe
            Resource:
              - !Ref TasksAssignmentNotificationTopic
              - !Ref TasksDeadlineNotificationTopic
              - !Ref ClosedTasksNotificationTopic
              - !Ref ReopenedTasksNotificationTopic

  # Lambda Function to update task status
  UpdateTaskStatusLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-UpdateTaskStatusLambda
      Handler: org.example.UpdateTaskStatusLambda::handleRequest
      Runtime: java21
      CodeUri: .
      MemorySize: 512
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - "dynamodb:UpdateItem"
            Resource: !GetAtt TasksTable.Arn
      Environment:
        Variables:
          TASKS_TABLE_NAME: !Ref DynamodbTasksTableName

  # Lambda Function for Deadline SNS Notification Processing
  SendDeadlineNotificationLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SendDeadlineNotificationLambda
      Handler: org.example.SendDeadlineNotificationLambda::handleRequest
      Runtime: java21
      CodeUri: .
      MemorySize: 512
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - sns:Publish
              - sns:ListSubscriptionsByTopic
              - sns:GetSubscriptionAttributes
              - sns:SetSubscriptionAttributes
            Resource:
              - !Ref ClosedTasksNotificationTopic

  # Lambda function to schedule events
  EventBridgeSchedulerLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-EventBridgeSchedulerLambda
      Handler: org.example.EventBridgeSchedulerLambda::handleRequest
      Runtime: java21
      CodeUri: .
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          TASKS_TABLE_NAME: !Ref TasksTable
          TASKS_QUEUE_URL: !Ref SQSTaskQueue
          TASKS_DEADLINE_TOPIC_ARN: !Ref TasksDeadlineNotificationTopic
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !Ref SQSTaskQueue
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:UpdateItem
              - dynamodb:Query
            Resource:
              - !GetAtt TasksTable.Arn
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbTasksTableName}/index/*
        - Statement:
            Effect: Allow
            Action:
              - sqs:sendmessage
            Resource: !GetAtt SQSTaskQueue.Arn
      Events:
        TaskDeadlineEvent:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
            Input: "{}"

  # Lambda Function for Updating Invite Message Template and creating admin user
  MyStackCompletionLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-MyStackCompletionLambda
      Handler: org.example.MyStackCompletionLambda::handleRequest
      Runtime: java21
      CodeUri: .
      MemorySize: 512
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:UpdateUserPool
              - cognito-idp:AdminCreateUser
              - cognito-idp:AdminAddUserToGroup
              - cognito-idp:AdminGetUser
            Resource: !GetAtt UserPool.Arn
        - Statement:
            Effect: Allow
            Action:
              - sns:Subscribe
            Resource:
              - !Ref TaskCompleteNotificationTopic
              - !Ref ClosedTasksNotificationTopic


  # Custom resource to perform actions after resource creation
  MyCustomResource:
    Type: Custom::MyCustomResource
    Properties:
      ServiceToken: !GetAtt MyStackCompletionLambda.Arn
      ServiceTimeout: 30
      UserPoolId: !Ref UserPool
      UserPoolDomain: !Ref UserPoolDomain
      UserPoolClient: !Ref UserPoolClient
      FrontendProdHost: !Ref FrontendProdHost
      Region: !Ref AWS::Region
      AdminEmail: !Ref AdminEmail
      AdminGroup: !Ref UserPoolAdminGroupName
      TaskCompleteTopicArn: !Ref TaskCompleteNotificationTopic
      ClosedTaskTopicArn: !Ref ClosedTasksNotificationTopic

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-TaskManagementUserPool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: role
          AttributeDataType: String
          Mutable: true
          Required: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AWS::StackName}UserPoolClient
      GenerateSecret: true
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - aws.cognito.signin.user.admin
      SupportedIdentityProviders:
        - COGNITO
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      CallbackURLs:
        - !Ref FrontendDevHost
        - !Ref FrontendProdHost
      UserPoolId: !Ref UserPool
      RefreshTokenValidity: 30
      AccessTokenValidity: 6
      IdTokenValidity: 6
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days


  # Cognito User Pool Domain
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${AWS::StackName}-domain
      UserPoolId: !Ref UserPool

  # Cognito ADMIN Group
  AdministratorsUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: User group for API Administrators
      GroupName: !Ref UserPoolAdminGroupName
      Precedence: 0
      UserPoolId: !Ref UserPool

 # Cognito TEAM MEMBERS Group
  TeamMembersUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: User group for team memmbers
      GroupName: !Ref UserPoolTeamGroupName
      Precedence: 0
      UserPoolId: !Ref UserPool

  # SNS Topics
  TasksAssignmentNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: TasksAssignmentNotificationTopic

  TasksDeadlineNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: TasksDeadlineNotificationTopic

  ClosedTasksNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ClosedTasksNotificationTopic

  ReopenedTasksNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ReopenedTasksNotificationTopic

  TaskCompleteNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: TaskCompleteNotificationTopic

  # SQS Queue for Task Notifications
  SQSTaskQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-TaskQueue

  # Dynamodb table for tasks
  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamodbTasksTableName
      AttributeDefinitions:
        - AttributeName: taskId
          AttributeType: S
        - AttributeName: assignedTo
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: deadline
          AttributeType: S
      KeySchema:
        - AttributeName: taskId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: AssignedToIndex
          KeySchema:
            - AttributeName: assignedTo
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: StatusAndDeadlineIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: deadline
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  # Step Functions Role
  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: SNSSubscribePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt SubscribeToSnsLambda.Arn
                  - !GetAtt UpdateTaskStatusLambda.Arn
                  - !GetAtt SendDeadlineNotificationLambda.Arn

  # Step Functions State Machine
  StepFunctionStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub ${AWS::StackName}-StepFunctionStateMachine
      RoleArn: !GetAtt StepFunctionsRole.Arn
      DefinitionString: !Sub |
        {
          "StartAt": "DetermineWorkflow",
          "States": {
            "DetermineWorkflow": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.workflowType",
                  "StringEquals": "onboarding",
                  "Next": "SubscribeToSNS"
                },
                {
                  "Variable": "$.workflowType",
                  "StringEquals": "taskDeadline",
                  "Next": "HandleTaskDeadline"
                }
              ],
              "Default": "FailState"
            },
            "SubscribeToSNS": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "SubscribeToTasksAssignmentTopic",
                  "States": {
                    "SubscribeToTasksAssignmentTopic": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SubscribeToSnsLambda}",
                      "Parameters": {
                        "TopicArn": "${TasksAssignmentNotificationTopic}",
                        "Email.$": "$.userEmail"
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "SubscribeToTasksDeadlineTopic",
                  "States": {
                    "SubscribeToTasksDeadlineTopic": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SubscribeToSnsLambda}",
                      "Parameters": {
                        "TopicArn": "${TasksDeadlineNotificationTopic}",
                        "Email.$": "$.userEmail"
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "SubscribeToClosedTasksTopic",
                  "States": {
                    "SubscribeToClosedTasksTopic": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SubscribeToSnsLambda}",
                      "Parameters": {
                        "TopicArn": "${ClosedTasksNotificationTopic}",
                        "Email.$": "$.userEmail"
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "SubscribeToReopenedTasksTopic",
                  "States": {
                    "SubscribeToReopenedTasksTopic": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SubscribeToSnsLambda}",
                      "Parameters": {
                        "TopicArn": "${ReopenedTasksNotificationTopic}",
                        "Email.$": "$.userEmail"
                      },
                      "End": true
                    }
                  }
                }
              ],
              "Next": "SuccessState"
            },
            "HandleTaskDeadline": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "UpdateTaskStatus",
                  "States": {
                    "UpdateTaskStatus": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${UpdateTaskStatusLambda}",
                      "Parameters": {
                        "TaskId.$": "$.taskId",
                        "Status": "Expired"
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "SendDeadlineNotification",
                  "States": {
                    "SendDeadlineNotification": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SendDeadlineNotificationLambda}",
                      "Parameters": {
                        "TopicArn": "${ClosedTasksNotificationTopic}",
                        "TaskId.$": "$.taskId",
                        "UserEmail.$": "$.assignedTo",
                        "AdminEmail.$": "$.createdBy",
                        "Deadline.$": "$.deadline"
                      },
                      "End": true
                    }
                  }
                }
              ],
              "Next": "SuccessState"
            },
            "SuccessState": {
              "Type": "Succeed"
            },
            "FailState": {
              "Type": "Fail",
              "Error": "InvalidWorkflowType",
              "Cause": "The workflow type provided is not supported."
            }
          }
        }


Outputs:
  SpringBootServelessApi:
    Description: URL for application
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'
    Export:
      Name: SpringBootServelessApi

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient

  UserPoolDomainURL:
    Description: Cognito User Pool Domain Hosted UI URL
    Value: !Sub https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com

  CognitoLoginURL:
    Description: Cognito User Pool Application Client Hosted Login UI URL
    Value: !Sub 'https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&redirect_uri=${FrontendProdHost}'

  CognitoAuthCommand:
    Description: AWS CLI command for Amazon Cognito User Pool authentication
    Value: !Sub "aws cognito-idp initiate-auth --auth-flow USER_PASSWORD_AUTH --client-id ${UserPoolClient} --auth-parameters USERNAME=<user@example.com>,PASSWORD=<password> --query 'AuthenticationResult.IdToken' --output text"

  CognitoUserPoolClientInfo:
    Description: AWS CLI command for Amazon Cognito User Pool information
    Value: !Sub "aws cognito-idp describe-user-pool-client --user-pool-id ${UserPool} --client-id ${UserPoolClient}"

  UpdateInviteMessageTemplate:
    Description: Update InviteMessageTemplate to include login url
    Value: !Sub "aws cognito-idp update-user-pool --user-pool-id ${UserPool} --admin-create-user-config \"AllowAdminCreateUserOnly=true,InviteMessageTemplate={EmailMessage=\\\"Hello {username}, Welcome to our Task Management System! Your temporary password is {####}. Please use it to sign in and reset your password. Click here to sign in: https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&redirect_uri=${FrontendProdHost}\\\",EmailSubject=\\\"Welcome to Task Management System\\\"}\""

  UserPoolAdminGroupName:
    Description: User Pool group name for API administrators
    Value: !Ref UserPoolAdminGroupName

  UserPoolTeamMembersGroupName:
    Description: User Pool group name for team members
    Value: !Ref UserPoolTeamGroupName

  TasksTable:
    Description: Dynamodb task table
    Value: !Ref DynamodbTasksTableName

  TaskQueueUrl:
    Description: "URL of the SQS Task Queue"
    Value: !Ref SQSTaskQueue