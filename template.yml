AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Serverless Spring Boot 2 API - org.example::spring-boot-serveless
Globals:
  Api:
    EndpointConfiguration: REGIONAL

Parameters:
  FrontendDevHost:
    Type: String
    Default: "http://localhost:4200"
    Description: The localhost of my frontend
  FrontendProdHost:
    Type: String
    Default: "http://localhost:4200"
    Description: The localhost of my frontend

Resources:
  # Lambda Function for API Gateway
  SpringBootServelessFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SpringBootServelessFunction
      Handler: org.example.StreamLambdaHandler::handleRequest
      Runtime: java21
      CodeUri: .
      MemorySize: 512
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - sqs:SendMessage
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource: !GetAtt SQSTaskQueue.Arn
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
            Resource: !GetAtt TasksTable.Arn
      Timeout: 30
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref UserPool
          FRONTEND_DEV_URL: !Ref FrontendDevHost
          FRONTEND_PROD_URL: !Ref FrontendProdHost
          TASKS_TABLE_NAME: !Ref TasksTable
          TASKS_QUEUE_URL: "SQSTaskQueue"
      Events:
        ProxyResource:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: any

  # Lambda Function for SQS Notification Processing
  SNSNotificationLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SNSNotificationLambda
      Handler: org.example.SNSNotificationLambda::handleRequest
      Runtime: java21
      CodeUri: .
      MemorySize: 512
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource: !GetAtt SQSTaskQueue.Arn
        - Statement:
            Effect: Allow
            Action:
              - sns:Publish
            Resource:
              - !Ref TasksAssignmentNotificationTopic
              - !Ref TasksDeadlineNotificationTopic
              - !Ref ClosedTasksNotificationTopic
              - !Ref ReopenedTasksNotificationTopic
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSTaskQueue.Arn
            BatchSize: 5

  # Lambda Function for SQS Notification Processing
  SubscribeToSnsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SubscribeToSNS
      Handler: org.example.SubscribeToSNS::handleRequest
      Runtime: java21
      CodeUri: .
      MemorySize: 512
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - sns:Subscribe
            Resource:
              - !Ref TasksAssignmentNotificationTopic
              - !Ref TasksDeadlineNotificationTopic
              - !Ref ClosedTasksNotificationTopic
              - !Ref ReopenedTasksNotificationTopic

  # Lambda Function for PostConfirmationTrigger
  PostConfirmationTriggerLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-PostConfirmationTrigger
      Handler: org.example.PostConfirmationTrigger::handleRequest
      Runtime: java21
      CodeUri: .
      MemorySize: 512
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - states:StartExecution
            Resource:
              - !GetAtt UserSubscriptionStateMachine.Arn
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref UserSubscriptionStateMachine
      Events:
        CognitoPostConfirmationEvent:
          Type: Cognito
          Properties:
            UserPool: !Ref UserPool
            Trigger: PostConfirmation

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-TaskManagementUserPool
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: role
          AttributeDataType: String
          Mutable: true
          Required: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AWS::StackName}UserPoolClient
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - aws.cognito.signin.user.admin
      SupportedIdentityProviders:
        - COGNITO
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      CallbackURLs:
        - !Ref FrontendDevHost
        - !Ref FrontendProdHost
      RefreshTokenValidity: 30
      UserPoolId: !Ref UserPool

  # Cognito User Pool Domain
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${AWS::StackName}-domain
      UserPoolId: !Ref UserPool

  # Cognito User Group
  ApiAdministratorsUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: User group for API Administrators
      GroupName: ApiAdministrators
      Precedence: 0
      UserPoolId: !Ref UserPool

  # SNS Topics
  TasksAssignmentNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: TasksAssignmentNotificationTopic

  TasksDeadlineNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: TasksDeadlineNotificationTopic

  ClosedTasksNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ClosedTasksNotificationTopic

  ReopenedTasksNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ReopenedTasksNotificationTopic

  # SQS Queue for Task Notifications
  SQSTaskQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-TaskQueue

  # Dynamodb table for tasks
  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-Tasks'
      AttributeDefinitions:
        - AttributeName: taskId
          AttributeType: S
        - AttributeName: assignedTo
          AttributeType: S
      KeySchema:
        - AttributeName: taskId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: AssignedToIndex
          KeySchema:
            - AttributeName: assignedTo
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  # Step Functions Role
  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: SNSSubscribePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Subscribe
                Resource:
                  - !Ref TasksAssignmentNotificationTopic
                  - !Ref TasksDeadlineNotificationTopic
                  - !Ref ClosedTasksNotificationTopic
                  - !Ref ReopenedTasksNotificationTopic
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt SubscribeToSnsLambda.Arn

  # Step Functions State Machine
  UserSubscriptionStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub ${AWS::StackName}-UserSubscriptionStateMachine
      RoleArn: !GetAtt StepFunctionsRole.Arn
      DefinitionString: !Sub |
        {
          "StartAt": "LogInput",
          "States": {
            "LogInput": {
              "Type": "Pass",
              "ResultPath": "$.input",
              "Next": "SubscribeToSNS"
            },
            "SubscribeToSNS": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "SubscribeToTasksAssignmentTopic",
                  "States": {
                    "SubscribeToTasksAssignmentTopic": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SubscribeToSnsLambda}",
                      "Parameters": {
                        "TopicArn": "${TasksAssignmentNotificationTopic}",
                        "Email.$": "$.userEmail"
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "SubscribeToTasksDeadlineTopic",
                  "States": {
                    "SubscribeToTasksDeadlineTopic": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SubscribeToSnsLambda}",
                      "Parameters": {
                        "TopicArn": "${TasksDeadlineNotificationTopic}",
                        "Email.$": "$.userEmail"
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "SubscribeToClosedTasksTopic",
                  "States": {
                    "SubscribeToClosedTasksTopic": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SubscribeToSnsLambda}",
                      "Parameters": {
                        "TopicArn": "${ClosedTasksNotificationTopic}",
                        "Email.$": "$.userEmail"
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "SubscribeToReopenedTasksTopic",
                  "States": {
                    "SubscribeToReopenedTasksTopic": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SubscribeToSnsLambda}",
                      "Parameters": {
                        "TopicArn": "${ReopenedTasksNotificationTopic}",
                        "Email.$": "$.userEmail"
                      },
                      "End": true
                    }
                  }
                }
              ],
              "End": true
            }
          }
        }


Outputs:
  SpringBootServelessApi:
    Description: URL for application
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'
    Export:
      Name: SpringBootServelessApi

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient

  UserPoolDomainURL:
    Description: Cognito User Pool Domain Hosted UI URL
    Value: !Sub https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com

  CognitoLoginURL:
    Description: Cognito User Pool Application Client Hosted Login UI URL
    Value: !Sub 'https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&redirect_uri=${FrontendProdHost}'

  TasksTable:
    Description: Dynamodb task table
    Value: !Ref TasksTable
